# Copyright (c) 2018 ActiveState Software Inc.
# Released under the BSD-3 license. See LICENSE file for details.
#
# appframe.tcl --
#
#	Application framework used by the wrapper and compiler
#	gUIs. Contains the application code shared by both of them.
#
# Copyright (c) 2002-2007 ActiveState Software Inc.

# 
# RCS: @(#) $Id: watchWin.tcl,v 1.3 2000/10/31 23:31:01 welch Exp $
#
# -----------------------------------------------------------------------------

package require log ; ::log::lvColor notice #90EE90
package require projectInfo
package require starkit
package require tcldevkit::tk

if {[tcldevkit::tk::present]} {
    package require BWidget
    package require splash
    package require help
    package require img::png
    package require image;image::file::here
}

# -----------------------------------------------------------------------------
# HACK: We source and initialize some code coming from the debugger so that we
# can launch a browser (from the about box and for help) and help. We have to
# tweak things a bit so that this part of the debugger works. This should go
# into a shared package instead of residing in the debugger code.

set here [file dirname [info script]]
##source [file join $here pref.tcl]                                 ; # Debugger code dealing with
##source [file join $here system.tcl]                               ; # launching a browser, and help.
##proc system::setWidgetAttributes {} {}          ; # Disable this code, not needed
namespace eval ::gui {}                         ; # Fake hook into debugger
proc           ::gui::getParent {} {return "."} ; #
namespace eval ::debugger {}                    ; # variable required during 
set ::debugger::parameters(appType) local       ; # system initialization
##system::init

namespace eval ::tcldevkit::appframe {
    variable here     $::here
    variable imagedir $::tcldevkit::imageDir

    # This is the Lick the Frog's head, 32x32
    variable icon {
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
    }
}

# -----------------------------------------------------------------------------

package require tcldevkit::config
namespace eval ::tcldevkit::appframe {}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::setName {name {tclvers {}}} {
    # Implicit [set]

    # Base references
    variable appNameD  "$::projectInfo::productName $name"
    variable appName   "[string map {{ } {}} $::projectInfo::productName] $name"
    variable appVers   "$::projectInfo::baseVersion"
    variable appNameV  "$appName $appVers"
    variable appNameFile $appName
    variable appNameVFile $appNameV

    if {[tcldevkit::tk::present]} {
	if {![string equal $tclvers ""]} {
	    # Show only major.minor in the title
	    # strip alpha/beta segments
	    regsub -all {[ab][0-9]+} $tclvers . tclvers
	    regsub -all {[.][.]}     $tclvers . tclvers
	    # reduce to major.minor
	    set tclvers [join [lrange [split $tclvers .] 0 1] .]
	    set appNameD "$appNameD for $tclvers"
	}

	wm title . $appNameD

	if {[tk windowingsystem] eq "aqua"} {
	    # On OS X put the name into the Menubar as well. Otherwise
	    # the name of the interpreter executing the application is
	    # used.
	    # TODO: This is obsolete
	    # package require tclCarbonProcesses 1.1
	    # carbon::setProcessName [carbon::getCurrentProcess] $name
	}

	if {[tk windowingsystem] ne "aqua"} {
	    variable icon
	    setIcon $icon
	}
    }
    return
}

proc ::tcldevkit::appframe::setIcon {data} {
    variable icon
    if {[lsearch -exact [image names] $data] != -1} {
	set icon $data
    } elseif {[file exists $data]} {
	if {[catch {set icon [image create photo -file $data]} err]} {
	    return
	}
    } elseif {$data ne ""} {
	if {[catch {set icon [image create photo -data $data]} err]} {
	    return
	}
    } else {
	return
    }
    wm iconphoto . -default $icon
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::Clear {} {
    variable nb
    variable lastsaved
    variable appNameD

    # Bug 47728: Undefine lastsaved so that next save forces the user
    # to chose a new name for the new project.

    set lastsaved {}
    $nb reset

    # Bug 76276. Remove project name from title bar as well.
    wm title . "$appNameD"

    SaveMenuStateHookInvoke noproject
    return
}

proc ::tcldevkit::appframe::HasProject {path} {
    variable lastsaved $path
    SaveMenuStateHookInvoke hasproject
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::Exit {} {
    variable dirty
    variable appNameVFile
    if {!$dirty}   exit

    set reply [tk_messageBox \
	    -icon warning -type yesnocancel \
	    -default yes \
	    -title "Save \"$appNameVFile\" configuration" \
	    -parent . -message "The current configuration is\
	    changed, yet not saved.\n\nDo you wish to save it ?"]

    switch -exact -- $reply {
	yes    {Save -1 ; exit}
	no     {exit}
	cancel {
	    # Exiting is canceled!
	    return
	}
    }
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::Help {} {
    if {[catch {
	help::open
    } msg]} {
	if {
	    [string match {Error displaying*}  $msg] &&
	    [string match {*couldn't execute*} $msg]
	} {
	    regexp {couldn't execute \"(.*)\"} -> browser
	    tk_messageBox \
		-icon error -type ok \
		-title "Help Error" \
		-parent . -message "Unable to show the help, browser $browser was not found or is not executable.\n\nPlease set the environment variable BROWSER to the path of a usable web browser."
	    return
	}

	if {[string match {Could not find a browser*} $msg]} {
	    tk_messageBox -icon error -title "Help Error" \
		-type ok \
		-message "Unable to find a browser to display the help.\n\nPlease set the environment variable BROWSER to the path of a usable web browser."
	    return
	}

	return -code error -errorinfo $::errorInfo -errorcode $::errorCode $msg
    }
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::Save {saveas} {
    variable lastdir
    variable lastsaved
    variable appName
    variable appNameVFile
    variable appNameD
    variable appNameV
    variable dirty

    #           / -1 - Chose automatically between 0/1.
    # saveas = <   0 - Use the name of the last saved project.
    #           \  1 - Chose name explicitly

    if {$saveas == -1} {
	if {$lastsaved == {}} {
	    set saveas 1
	} else {
	    set saveas 0
	}
    }

    if {$saveas} {
	# Let user choose where to save

	variable projExt
	variable projExtF
	if {$lastsaved != {}} {
	    set outfile [tk_getSaveFile \
		-title       "Save $appNameVFile configuration" \
		-parent      . \
	        -initialfile [file tail $lastsaved] \
		-initialdir  $lastdir \
		-filetypes   [SaveExtensionHookInvoke all]
	    ]
	} else {
	    set outfile [tk_getSaveFile \
		-title      "Save $appNameVFile configuration" \
		-parent     . \
		-initialdir $lastdir \
		-filetypes  [SaveExtensionHookInvoke all]
	    ]
	}
	if {$outfile == {}} {return 0}
	set lastdir [file dirname $outfile]

	log::log debug "SAVE. Raw path   ($outfile)"

	# Append default extension if not provided by the dialog.
	if {[file extension $outfile] == {}} {
	    log::log debug "SAVE. Adding ($projExtF), extension was missing"
	    append outfile [SaveExtensionHookInvoke default]
	}

	log::log debug "SAVE. Final path ($outfile)"
    } else {
	# Write to the loaded project file.

	set outfile $lastsaved
    }

    #  Check permissions first.

    if {[file exists $outfile]} {
	if {![file writable $outfile]} {
	    tk_messageBox -icon error \
		-parent . -type ok \
		-title "Save $appNameVFile Error" \
		-message "Unable to save to the chosen file. \
                          It exists and is not writable. "
	    return
	}
    } else {
	if {[catch {
	    set ch [open $outfile w]
	} msg]} {
	    tk_messageBox -icon error -title {Tcl Dev Kit Save Error} \
		-type ok -message "Could not create \"$outfile\"."
	    return
	}
	# Can be created. Restore non-existence for actual save op.
	close $ch
	file delete -force $outfile
    }

    # Run the actual save operation.

    SaveHookInvoke $outfile $saveas

    SaveMenuStateHookInvoke hasproject
    markclean

    set lastsaved $outfile

    if {$saveas} {
	wm title . "$appNameD : [file tail $outfile]"
    }

    return 1
}

proc ::tcldevkit::appframe::SaveExtensions {cmd} {
    variable projExt
    variable projExtF

    if {$cmd eq "all"} {
	return  $projExt
    } elseif {$cmd eq "default"} {
	return  $projExtF
    } else {
	return -code error "Bad extension hook cmd \"$cmd\""
    }
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::SaveHookSet {cmdprefix} {
    variable saveHook $cmdprefix
    return
}

proc ::tcldevkit::appframe::SaveExtensionHookSet {cmdprefix} {
    variable saveExtensionHook $cmdprefix
    return
}

proc ::tcldevkit::appframe::SaveHookInvoke {path saveas} {
    variable saveHook
    return [uplevel \#0 [linsert $saveHook end $path $saveas]]
}

proc ::tcldevkit::appframe::SaveExtensionHookInvoke {cmd} {
    variable saveExtensionHook
    return [uplevel \#0 [linsert $saveExtensionHook end $cmd]]
}

proc ::tcldevkit::appframe::SaveConfig {outfile saveas} {
    variable appName
    variable appNameFile
    variable appNameV
    variable appNameVFile
    variable appVers
    variable writemode
    variable nb

    if {[file exists $outfile]} {
	foreach {pro tool} [::tcldevkit::config::Peek/2.0 $outfile] { break }

	if {$pro && ![string equal $tool $appNameFile]} {
	    # The chosen file exists, is a Tcl Dev Kit Project File in
	    # Format 2.0, and was written by a different tool than the
	    # current one. Ask the user again, if overwriting it is
	    # wanted.

	    set reply [tk_messageBox \
		    -icon warning -type yesno \
		    -default no \
		    -title "Save $appNameVFile configuration" \
		    -parent . -message "The chosen file \"$outfile\"\
		    contains project information for \"$tool\", whereas\
		    we are the $appNameFile.\n\nDo you truly wish to\
		    overwrite the contents of this file ?"]

	    if {[string equal $reply "no"]} {
		return
	    }
	}
    }

    ::tcldevkit::config::Write${writemode}/2.0 $outfile [$nb configuration] \
	    $appNameFile $appVers
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::SaveMenuStateHookSet {cmdprefix} {
    variable saveMenuStateHook $cmdprefix
    return
}

proc ::tcldevkit::appframe::SaveMenuStateHookInvoke {loadstate} {
    variable saveMenuStateHook
    return [uplevel \#0 [linsert $saveMenuStateHook end $loadstate]]
}

proc ::tcldevkit::appframe::SaveMenuState {loadstate} {
    if {$loadstate eq "hasproject"} {
	menu save   -> normal
	menu saveas -> normal
    } else {
	menu save   -> disabled
	menu saveas -> normal
    }
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::LoadChainAppend {cmd} {
    variable loadchain
    lappend  loadchain $cmd
    return
}

proc ::tcldevkit::appframe::Load {} {
    variable appNameVFile
    variable lastdir
    variable lastsaved
    variable projExt

    set infile [tk_getOpenFile \
	    -title     "Load $appNameVFile configuration" \
	    -parent    . \
	    -initialdir $lastdir \
	    -filetypes $projExt
    ]

    if {$infile == {}} {return}
    set lastdir [file dirname $infile]

    LoadChainInvoke $infile
    return
}

proc ::tcldevkit::appframe::LoadChainInvoke {path} {
    variable loadchain
    variable appNameD
    variable lastsaved

    set messages {}
    foreach loader $loadchain {
	set msg {}
	set status [eval [linsert $loader end $path msg]]
	if {$status eq "ok"} {
	    # This loader has sucessfully processed the chosen
	    # path. Stop.

	    set lastsaved $path

	    SaveMenuStateHookInvoke hasproject
	    markclean

	    wm title . "$appNameD : [file tail $path]"
	    return
	}

	if {$status eq "fatal"} {
	    # Fatal failure in this loader, report, and stop.
	    LoadError $path [list $msg]
	    return
	}

	# status 'rejected'
	# This loader failed, but not in a fatal way, remember
	# the message, and invoke the next loader, if any.
	lappend messages $msg
    }

    LoadError $path $messages
    return
}

proc ::tcldevkit::appframe::LoadError {path messagelist} {
    set mtitle  "Error while loading configuration file"
    set message "${mtitle}:\n\n  ${path}\n\n[join $messagelist \n\n]"

    if {[tcldevkit::tk::present]} {
	tk_messageBox -type ok -icon error -parent . \
	    -title $mtitle \
	    -message $message
    } else {
	puts stderr \n$message\n
    }
    return
}

proc ::tcldevkit::appframe::LoadConfiguration/2.0 {infile mv} {
    variable nb
    variable appName
    variable appNameFile
    variable readmode

    upvar 1 $mv message

    # Check the chosen file for format conformance.

    foreach {pro tool} [::tcldevkit::config::Peek/2.0 $infile] { break }

    if {!$pro} {
	# Wrong format. Reject, fatal only if there is no other loader
	# coming after this one.
	set fmtbase "File format not recognized.\n\nThe chosen file does not contain Tcl Dev Kit Project information."
	set message $fmtbase
	return rejected
    }

    # Check that the application understands the information in the
    # file. To this end we ask the master widget for a list of
    # application names it supports. If this results in an error we
    # assume that only files specifically for this application are
    # understood.

    if {[catch {
	set allowed_tools [$nb configuration tools]
    }]} {
	set allowed_tools [list $appNameFile]
    }
    if {[lsearch -exact $allowed_tools $tool] < 0} {
	# Is a project file, but not for this tool.
	# Non-fatal rejection.
	set fmttool "The chosen Tcl Dev Kit Project file does not contain information for $appNameFile, but"
	set message "$fmttool $tool"
	return rejected
    }

    # The file has been accepted as belonging to this loader. Any
    # other problem found with it will cause a fatal rejection to
    # prevent other loaders from even trying.

    # The file is tentatively identified as project file for this
    # tool, so read the information in it. If more than one tool is
    # supported by the application we ask its master widget for the
    # list of keys acceptable for the found tool.

    if {[llength $allowed_tools] > 1} {
	set allowed_keys [$nb configuration keys $tool]
    } else {
	set allowed_keys [$nb configuration keys]
    }

    if {[catch {
	set cfg [::tcldevkit::config::Read${readmode}/2.0 $infile \
		$allowed_keys]
    } msg]} {
	set fmtkey  "Unable to handle the following keys found in the Tcl Dev Kit Project file for"
	set message "$fmtkey ${tool}:\n\n$msg"
	return fatal
    }

    if {[catch {
	# If more than one tool configuration is supported we tell the
	# master widget not only the configuration, but also for what
	# tool it is for.

	# Bugzilla 27128 / HACK
	# Provide name of loaded file to the application code.
	# The application may not support this, hence we catch.

	catch {$nb configuration fname $infile}

	if {[llength $allowed_tools] > 1} {
	    $nb configuration = $cfg $tool
	} else {
	    $nb configuration = $cfg
	}
    } msg]} {
	set message $msg
	return fatal
    }

    # File was not only accepted but sucessfully read and stored into
    # the application state. We are good.
    return ok
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::markdirty {} {
    variable dirty
    set      dirty 1
    return
}

proc ::tcldevkit::appframe::markclean {} {
    variable dirty
    set      dirty 0
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::initConfig {configfile} {
    variable initial_cfg {}
    if {$configfile != {}} {
	set initial_cfg $configfile
    }
    return
}

proc ::tcldevkit::appframe::feedback {flag} {
    if {$flag} {
	.main showstatusbar progression
	.main configure \
		-progresstype nonincremental_infinite \
		-progressmax 100
    } else {
	.main showstatusbar status
    }

    update
    return
}
proc ::tcldevkit::appframe::feednext {} {
    variable progress
    incr     progress

    update
    return
}

proc ::tcldevkit::appframe::nb {} {
    variable nb
    return  $nb
}

proc ::tcldevkit::appframe::run {subpackage {script {}}} {
    variable lastsaved
    package require $subpackage
    set ::tcldevkit::appframe::progress 0

    variable initial_cfg
    variable nb
    variable                                            menu
    variable                      status_message ""

    MainFrame .main -textvariable status_message -menu $menu \
	    -progressvar ::tcldevkit::appframe::progress

    .main showstatusbar status
    set fr [.main getframe]
    set nb [::$subpackage $fr.nb]

    grid .main -column 0 -row 0 -sticky swen
    grid columnconfigure . 0 -weight 1
    grid rowconfigure    . 0 -weight 1

    grid $nb -column 0 -row 0 -sticky swen
    grid columnconfigure $fr 0 -weight 1
    grid rowconfigure    $fr 0 -weight 1

    ## Special code of the application itself

    if {$script != {}} {
	uplevel #0 $script
    }

    ## Start the event loop (Can't assume wish and a running
    ## eventloop).

    SaveMenuStateHookInvoke noproject
    markclean

    if {$initial_cfg != {}} {
	LoadChainInvoke $initial_cfg
    }

    update idle
    wm deiconify .

    if {[tcldevkit::tk::present]} {
	splash::complete
    }

    vwait __forever
    exit [expr {$status == 0}]
    return
}

# -----------------------------------------------------------------------------


proc ::tcldevkit::appframe::Init {} {
    variable menu

    set hastk 0
    if {[tcldevkit::tk::present]} {
	wm  withdraw .
	wm  protocol . WM_DELETE_WINDOW ::tcldevkit::appframe::Exit

	splash::start
	set hastk 1
    }

    set fmenu {
	{command {&New Project}        {new}    {New Configuration}                {} -command ::tcldevkit::appframe::Clear}
	{separator}
	{command {&Save Project}       {save}   {Save configuration, use known name} {} -command {::tcldevkit::appframe::Save 0}}
	{command {&Save Project As...} {saveas} {Save configuration and choose name} {} -command {::tcldevkit::appframe::Save 1}}
	{command {&Load Project...}    {load}   {Load a configuration}               {} -command ::tcldevkit::appframe::Load}
    }

    set hcmd {command &Help {help} {Launch help viewer} {F1} -command ::tcldevkit::appframe::Help}

    if {$hastk} {
	lappend hcmd -compound left -image [image::get help]

	set hmenu [list $hcmd]

	if {[tk windowingsystem] ne "aqua"} {
	    lappend fmenu separator \
		    {command &Exit {exit} {Exit the application} {} -command ::tcldevkit::appframe::Exit}
	    lappend hmenu separator \
		[list command "&About $::projectInfo::productName" {about} {Show copyright information} {} -command splash::showAbout]
	} else {
	    interp alias "" ::tk::mac::Quit "" ::tcldevkit::appframe::Exit
	    bind all <Command-q> ::tk::mac::Quit
	}
    } else {
	set hmenu [list $hcmd]
    }

    set menu {}

    if {$hastk} {
	if {[tk windowingsystem] eq "aqua"} {
	    # Get the About into the special .apple menu, which has to be FIRST.
	    set acmd [list command "&About $::projectInfo::productName" {about} {Show copyright information} {} -command splash::showAbout]
	    lappend menu &TDK {} apple 0 [list $acmd separator]
	}
    }

    # Default appframe menus
    lappend menu &File {} fmenu 0 $fmenu
    lappend menu &Help {} help  0 $hmenu
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::setkey {w k command} {

    bind $w <Key-$k> $command
    foreach c [winfo children $w] {
	setkey $c $k $command
    }
    return
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::mapOut {map arrayvar} {
    upvar 1 $arrayvar serial
    foreach {old new} $map {
	set   serial($new) $serial($old)
	unset serial($old)
    }
    return
}

proc ::tcldevkit::appframe::mapIn {map arrayvar} {
    upvar 1 $arrayvar serial
    foreach {old new} $map {
	# Ignore missing keys. They simply do not influence the
	# current configuration.

	if {[info exists serial($new)]} {
	    set   serial($old) $serial($new)
	    unset serial($new)
	}
    }
    return
}

proc ::tcldevkit::appframe::mapKeys {map} {
    set res [list]
    foreach {old new} $map {lappend res $new}
    return $res
}

# -----------------------------------------------------------------------------

proc ::tcldevkit::appframe::NeedReadOrdered {} {
    variable readmode
    set      readmode Ordered
    return
}

proc ::tcldevkit::appframe::NeedWriteOrdered {} {
    variable writemode
    set      writemode Ordered
    return
}

proc ::tcldevkit::appframe::setProjExt {label newext} {
    variable projExt  [list [list $label [list $newext]] {All {*}}]
    variable projExtF $newext
    return
}

proc ::tcldevkit::appframe::clearProjExt {} {
    variable projExt  {}
    variable projExtF {}
    return
}

proc ::tcldevkit::appframe::appendProjExt {label newext} {
    variable projExt
    variable projExtF

    lappend projExt  [list $label [list $newext]]
    if {$newext eq "*"} return
    set projExtF $newext
    return
}

proc ::tcldevkit::appframe::setInitialDir {dir} {
    variable lastdir $dir
    return
}

proc ::tcldevkit::appframe::menu {menu _ state} {
    .main setmenustate $menu $state
    return
}

proc ::tcldevkit::appframe::appVersion {} {
    variable appVers
    return  $appVers
}

proc ::tcldevkit::appframe::appName {} {
    variable appName
    return  $appName
}

proc ::tcldevkit::appframe::menu {menu _ state} {
    .main setmenustate $menu $state
    return
}

namespace eval ::tcldevkit::appframe {
    variable appNameD  {} ; # Display (Window Titles)
    variable appName   {} ; # Config File tool name
    variable appNameFile {} ;# As above
    variable appVers   {}
    variable appNameV  {}
    variable appNameVFile  {}
    variable nb        {}
    variable menu      {}
    variable lastdir   [pwd]
    variable lastsaved {}
    variable readmode  {}
    variable writemode {}
    variable dirty     0
    variable projExt   {{TPJ {.tpj}} {All {*}}}
    variable projExtF  .tpj

    variable dynhelp ; array set dynhelp {}
    variable off     ; array set off     {}

    # List of commands to use when loading a project file.
    # Default: Standard command for .tpj syntax-based files.
    variable loadchain {
	::tcldevkit::appframe::LoadConfiguration/2.0
    }

    # Hook to intercept the saving of a project file.

    variable saveHook \
	::tcldevkit::appframe::SaveConfig

    # Hook to intercept various manipulations of the save(as) menu
    # buttons (during/after load and save of project files).

    variable saveMenuStateHook \
	::tcldevkit::appframe::SaveMenuState

    # Hook to return file extension information during save, to allow
    # for per dynamic changes based on the loaded project.

    variable saveExtensionHook \
	::tcldevkit::appframe::SaveExtensions
}

# -----------------------------------------------------------------------------

::tcldevkit::appframe::Init
package provide tcldevkit::appframe 1.0
