# @configure_input@
#
# Copyright (c) 2024 Mason McParlane
# Released under the BSD-3 license. See LICENSE file for details.
#

top_builddir = @abs_top_builddir@
srcdir       = @srcdir@
prefix       = @prefix@
exec_prefix  = @exec_prefix@
bindir       = @bindir@
libdir       = @libdir@
includedir   = @includedir@
datarootdir  = @datarootdir@
runstatedir  = @runstatedir@
datadir      = @datadir@
mandir       = @mandir@

VPATH = @srcdir@

EXEEXT = @EXEEXT@

INSTALL_OPTIONS  =
INSTALL          = @INSTALL@ $(INSTALL_OPTIONS)
INSTALL_DATA_DIR = @INSTALL_DATA_DIR@
INSTALL_DATA     = @INSTALL_DATA@
INSTALL_PROGRAM  = @INSTALL_PROGRAM@
INSTALL_SCRIPT   = @INSTALL_SCRIPT@
INSTALL_LIBRARY  = @INSTALL_LIBRARY@

PACKAGE_NAME    = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE_TARNAME = @PACKAGE_TARNAME@

TCL_BIN_DIR	= @TCL_BIN_DIR@
TCL_SRC_DIR	= @TCL_SRC_DIR@
#TK_BIN_DIR	= @TK_BIN_DIR@
#TK_SRC_DIR	= @TK_SRC_DIR@

TDK_TCLKIT     = @TDK_TCLKIT@
TDK_TCLSH_PROG = @TDK_TCLSH_PROG@
TDK_WISH_PROG  = @TDK_WISH_PROG@

TDK_EXTRA_DISTRO_PKGS = @TDK_EXTRA_DISTRO_PKGS@

kext = @TDK_KIT_EXT@

TDK_DEFAULT_APPS = \
	xref$(kext) \
	vfse$(kext) \
	tclapp$(kext) \
	tape$(kext) \
	lsmfs$(kext) \
	inspector$(kext) \
	debug$(kext) \
	comp$(kext) \
	check$(kext)

TDK_STARPACK_APPS = \
	xref$(EXEEXT) \
	vfse$(EXEEXT) \
	tclapp$(EXEEXT) \
	tape$(EXEEXT) \
	lsmfs$(EXEEXT) \
	inspector$(EXEEXT) \
	debug$(EXEEXT) \
	comp$(EXEEXT) \
	check$(EXEEXT)

TDK_STARKIT_APPS = \
	xref.tcl \
	vfse.tcl \
	tclapp.tcl \
	tape.tcl \
	lsmfs.tcl \
	inspector.tcl \
	debug.tcl \
	comp.tcl \
	check.tcl

TDK_INTERNAL_PKGS = \
	afs \
	tcldevkit::appframe \
	hpane \
	checker \
	cmatch \
	engine \
	debugger \
	nub \
	view \
	vtree \
	help \
	ico \
	image \
	listentry \
	clogwindow \
	teapot::metadata \
	as::cache::async \
	oomk \
	osx::bundle::app \
	tdk_prowrap \
	teapot::package::gen \
	platform \
	pref::devkit \
	pref \
	pref::teapot \
	projectInfo \
	repository::local \
	selfile \
	splash \
	stringfileinfo \
	syscolor \
	tap::db \
	tapscan \
	tcldebugger_attach \
	tdk_appstartup \
	teapot::config \
	teapot::entity \
	teapot::link \
	tlocate \
	toolbar \
	tclapp::wrapengine \
	Entity

DECL_WRAP_CMD = wrap_app() { \
	local OUTPUT="$$1"; \
	local APP_NAME=$$(echo "$$OUTPUT" | cut    -f1 -d '.'); \
	local APP_EXT=$$(echo "$$OUTPUT"  | cut -s -f2 -d '.'); \
	local WRAP_PREFIX_ARG= ; \
	local WRAP_PREFIX_VAL= ; \
	local DISTRO_PKGS= ; \
	if test "$$APP_EXT" != "tcl"; then \
		if test -n "$(TDK_TCLKIT)"; then \
			WRAP_PREFIX_ARG="-prefix"; \
			WRAP_PREFIX_VAL="$(TDK_TCLKIT)"; \
			DISTRO_PKGS="$(TDK_EXTRA_DISTRO_PKGS)"; \
		else \
			echo "Error: cannot build requested Starpack: \"$$OUTPUT\".\
				  Please run \"configure --with-tclkit=...\"." 1>&2; \
			exit 1; \
		fi; \
	else \
		WRAP_PREFIX_VAL='"$$(dirname "$$0")/wish$(EXEEXT)"'; \
		WRAP_PREFIX_ARG="-interpreter"; \
	fi; \
	local TOP_LEVEL_FILES="$(srcdir)/LICENSE"; \
	for file in "$(srcdir)/artwork" "$(srcdir)/data/images"; do \
		TOP_LEVEL_FILES="$$TOP_LEVEL_FILES $${file}/*"; \
	done; \
	local APP_FILES=$$(find "$(srcdir)/app/$$APP_NAME" -type d); \
	local APP_FILES_WITH_GLOB= ; \
	for file in $${APP_FILES}; do \
		APP_FILES_WITH_GLOB="$$APP_FILES_WITH_GLOB $${file}/*"; \
	done; \
	local PACKAGES= ; \
	for pkg in $${DISTRO_PKGS} $(TDK_INTERNAL_PKGS); do \
		PACKAGES="$$PACKAGES -pkg $$pkg"; \
	done; \
	TCLAPP_PKGPATH="$(srcdir)" \
		$(TDK_TCLSH_PROG) $(srcdir)/app/tclapp/main.tcl \
			-relativeto "$(srcdir)/app/$$APP_NAME" "$(srcdir)/app/$$APP_NAME/main.tcl" \
			-relativeto "$(srcdir)/app/$$APP_NAME" $${APP_FILES_WITH_GLOB} \
			$${PACKAGES} \
			-anchor "" -relativeto "$(srcdir)" $${TOP_LEVEL_FILES} \
			$${WRAP_PREFIX_ARG} "$${WRAP_PREFIX_VAL}" \
			-out "$$OUTPUT"; \
}

all: default_apps

default_apps: $(TDK_DEFAULT_APPS)

starpacks: $(TDK_STARPACK_APPS)

starkits: $(TDK_STARKIT_APPS)

$(TDK_STARKIT_APPS) $(TDK_STARPACK_APPS):
	$(DECL_WRAP_CMD); wrap_app $@

clean:
	@for app in $(TDK_STARKIT_APPS) $(TDK_STARPACK_APPS); do \
		if [ -f "$(top_builddir)/$$app" ]; then \
			echo "Removing $(top_builddir)/$$app"; \
			rm -f "$(top_builddir)/$$app"; \
		fi; \
	done

Makefile: $(srcdir)/Makefile.in config.status
	./config.status $@

config.status: configure
	./config.status --recheck

#.PHONY: FORCE all clean check dist distcheck install uninstall

.PHONY: all default_apps starpacks starkits clean
